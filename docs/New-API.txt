# Old API
# *******

>>> ih = IntelHex('file.hex')	# create instance and specify file name for further loading
>>> result = ih.readfile()	# load hex file (name was specified during init)	
                                # result shows success or failure of loading hex

# errors during read hex file accessible via ih.Error; ih.AddrOverlap

>>> ih.tobinfile(file)		# store to bin

>>> ih.writefile(file)		# store to hex


# New API
# *******

>>> ih = IntelHex()		# (DONE) create empty object
>>> ih = IntelHex('file.hex')	# (DONE) immediately load data from hex file
>>> ih = IntelHex(ih2)		# copying constructor from another
				# IntelHex object (DONE)
>>> ih = IntelHex(dict)		# init from dictionary (keys are addresses,
				# values are bytes) (DONE)

# Multiple times load data from hex/bin files:

>>> ih.loadfile('file.hex', format='hex')	# (DONE)
>>> ih.loadfile('file.bin', format='bin')	# (DONE)

# New handling of errors during loading hex:
# errors will be raised

>>> NotAHexFile, BadHexRecord, AddrOverlap	# (DONE)

# Save data to file (hex/bin):

>>> ih.tofile('out.hex', format='hex')		# (DONE)
>>> ih.tofile('out.bin', format='bin')		# (DONE)

New API is DONE.
